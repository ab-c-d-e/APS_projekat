// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheScientistAPI.Data;

#nullable disable

namespace TheScientistAPI.Migrations
{
    [DbContext(typeof(ScientistContext))]
    [Migration("20230104223603_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheScientistAPI.Model.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ScientificPaperID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ScientificPaperID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TheScientistAPI.Model.MessageUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageUsers");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int>("SegmentID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("NotificationTypeID");

                    b.HasIndex("SegmentID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TheScientistAPI.Model.NotificationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("TheScientistAPI.Model.NotificationUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("TheScientistAPI.Model.PaperUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ScientificPaperID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScientificPaperID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("PaperUsers");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ScientificPaper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ScientificPapers");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Segment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScientificPaperID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScientificPaperID");

                    b.HasIndex("SectionID");

                    b.ToTable("Segment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Segment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TheScientistAPI.Model.ToDoItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ListID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<string>("ToDoText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ListID");

                    b.HasIndex("NotificationID");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ToDoList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ScientificPaperID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScientificPaperID");

                    b.HasIndex("UserID");

                    b.ToTable("ToDoLists");
                });

            modelBuilder.Entity("TheScientistAPI.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TheScientistAPI.Model.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("TheScientistAPI.Model.CodeSegment", b =>
                {
                    b.HasBaseType("TheScientistAPI.Model.Segment");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CodeSegment");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Image", b =>
                {
                    b.HasBaseType("TheScientistAPI.Model.Segment");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Image");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Section", b =>
                {
                    b.HasBaseType("TheScientistAPI.Model.Segment");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Section");
                });

            modelBuilder.Entity("TheScientistAPI.Model.TextSegment", b =>
                {
                    b.HasBaseType("TheScientistAPI.Model.Segment");

                    b.HasDiscriminator().HasValue("TextSegment");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Message", b =>
                {
                    b.HasOne("TheScientistAPI.Model.ScientificPaper", "ScientificPaper")
                        .WithMany()
                        .HasForeignKey("ScientificPaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScientificPaper");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TheScientistAPI.Model.MessageUser", b =>
                {
                    b.HasOne("TheScientistAPI.Model.Message", "Message")
                        .WithMany("Recivers")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Notification", b =>
                {
                    b.HasOne("TheScientistAPI.Model.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("TheScientistAPI.Model.NotificationUser", b =>
                {
                    b.HasOne("TheScientistAPI.Model.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheScientistAPI.Model.PaperUser", b =>
                {
                    b.HasOne("TheScientistAPI.Model.ScientificPaper", "ScientificPaper")
                        .WithMany()
                        .HasForeignKey("ScientificPaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.User", "User")
                        .WithMany("Papers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScientificPaper");

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Segment", b =>
                {
                    b.HasOne("TheScientistAPI.Model.ScientificPaper", null)
                        .WithMany("Segments")
                        .HasForeignKey("ScientificPaperID");

                    b.HasOne("TheScientistAPI.Model.Section", null)
                        .WithMany("Segments")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ToDoItem", b =>
                {
                    b.HasOne("TheScientistAPI.Model.ToDoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ToDoList", b =>
                {
                    b.HasOne("TheScientistAPI.Model.ScientificPaper", "ScientificPaper")
                        .WithMany()
                        .HasForeignKey("ScientificPaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheScientistAPI.Model.User", "User")
                        .WithMany("ToDoLists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScientificPaper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Message", b =>
                {
                    b.Navigation("Recivers");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ScientificPaper", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("TheScientistAPI.Model.ToDoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TheScientistAPI.Model.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Papers");

                    b.Navigation("ToDoLists");
                });

            modelBuilder.Entity("TheScientistAPI.Model.Section", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
